# @lc app=leetcode id=928 lang=python3
#
# [928] Minimize Malware Spread II
#
# https://leetcode.com/problems/minimize-malware-spread-ii/description/
#
# algorithms
# Hard (42.17%)
# Likes:    438
# Dislikes: 69
# Total Accepted:    15.5K
# Total Submissions: 36.7K
# Testcase Example:  '[[1,1,0],[1,1,0],[0,0,1]]\n[0,1]'
#
# You are given a network of n nodes represented as an n x n adjacency matrix
# graph, where the i^th node is directly connected to the j^th node if
# graph[i][j] == 1.
#
# Some nodes initial are initially infected by malware. Whenever two nodes are
# directly connected, and at least one of those two nodes is infected by
# malware, both nodes will be infected by malware. This spread of malware will
# continue until no more nodes can be infected in this manner.
#
# Suppose M(initial) is the final number of nodes infected with malware in the
# entire network after the spread of malware stops.
#
# We will remove exactly one node from initial, completely removing it and any
# connections from this node to any other node.
#
# Return the node that, if removed, would minimize M(initial). If multiple
# nodes could be removed to minimize M(initial), return such a node with the
# smallest index.
#
#
# Example 1:
# Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
# Output: 0
# Example 2:
# Input: graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]
# Output: 1
# Example 3:
# Input: graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]
# Output: 1
#
#
# Constraints:
#
#
# n == graph.length
# n == graph[i].length
# 2 <= n <= 300
# graph[i][j] is 0 or 1.
# graph[i][j] == graph[j][i]
# graph[i][i] == 1
# 1 <= initial.length < n
# 0 <= initial[i] <= n - 1
# All the integers in initial are unique.
#
#
#

# @lc tags=math;geometry

# @lc imports=start
from imports import *

# @lc imports=end

# @lc idea=start
#
# 病毒传染，去掉一个初始感染节点，最小化总感染数。
# 染色。
#
# @lc idea=end

# @lc group=graph

# @lc rank=10


# @lc code=start
class Solution:

    def minMalwareSpread(self, graph: List[List[int]],
                         initial: List[int]) -> int:

        #  adjoin list
        n = len(graph)
        adjs = [[] for _ in range(n)]
        for i, j in product(range(n), range(n)):
            if graph[i][j] == 1:
                adjs[i].append(j)

        # initial malware
        malwares = [False] * n
        for i in initial:
            malwares[i] = True

        # colors
        noMalware = -1
        multiMalware = -2
        colors = [i if f else noMalware for i, f in enumerate(malwares)]

        def spreadSrc(src, adjSrc):
            ls = [adjSrc]
            while ls:
                node = ls.pop()
                for nodeAdj in adjs[node]:

                    color = colors[nodeAdj]
                    if color == src:
                        continue
                    if color != noMalware:
                        return True
                    else:
                        colors[nodeAdj] = src
                        ls.append(nodeAdj)
            return False

        def spreadMultiMalware(adjSrc):
            ls = [adjSrc]
            while ls:
                node = ls.pop()
                for nodeAdj in adjs[node]:
                    if colors[nodeAdj] == multiMalware or malwares[
                            nodeAdj] == True:
                        continue
                    colors[nodeAdj] = multiMalware
                    ls.append(nodeAdj)

        # spread
        for src in initial:

            for adjSrc in adjs[src]:

                if colors[adjSrc] != noMalware:
                    continue

                colors[adjSrc] = src

                flag = spreadSrc(src, adjSrc)
                if flag:
                    spreadMultiMalware(adjSrc)

        counter = Counter(colors)
        cn = [(-counter[src], src) for src in initial]
        st = min(cn)
        return st[1]


# @lc code=end

# @lc main=start
if __name__ == '__main__':
    print('Example 1:')
    print('Input : ')
    print('graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]')
    print('Exception :')
    print('0')
    print('Output :')
    print(
        str(Solution().minMalwareSpread([[1, 1, 0], [1, 1, 0], [0, 0, 1]],
                                        [0, 1])))
    print()

    print('Example 2:')
    print('Input : ')
    print('graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]')
    print('Exception :')
    print('1')
    print('Output :')
    print(
        str(Solution().minMalwareSpread([[1, 1, 0], [1, 1, 1], [0, 1, 1]],
                                        [0, 1])))
    print()

    print('Example 3:')
    print('Input : ')
    print('graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]')
    print('Exception :')
    print('1')
    print('Output :')
    print(
        str(Solution().minMalwareSpread(
            [[1, 1, 0, 0], [1, 1, 1, 0], [0, 1, 1, 1], [0, 0, 1, 1]], [0, 1])))
    print()

    pass
# @lc main=end